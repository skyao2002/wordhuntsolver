{"version":3,"sources":["Components/Grid.js","Components/AllWords.js","App.js","serviceWorker.js","index.js"],"names":["Grid","AllWords","Compress","require","App","useState","letters","setDirections","setCurrWord","currIdx","setCurrIdx","allDirections","useEffect","className","Navbar","bg","variant","Brand","href","Container","Jumbotron","Button","size","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4UA+CeA,I,cCnBAC,I,wBCdTC,EAAWC,EAAQ,IACR,IAAID,EA+INE,MA/Hf,WAAgB,IAAD,EACWC,mBAAS,MADpB,gCAEiBA,mBAAS,KAF1B,mBAENC,EAFM,aAGuBD,mBAAS,KAHhC,mBAGME,GAHN,aAImBF,mBAAS,MAJ5B,mBAIIG,GAJJ,aAKiBH,mBAAS,GAL1B,mBAKNI,EALM,KAKGC,EALH,OAMWL,mBAAS,GANpB,gCAO6BA,mBAAS,KAPtC,mBAONM,EAPM,aAQuBN,mBAAS,OARhC,mBAyFb,OAzFa,UAsDbO,qBAAU,WACO,IAAXN,GAAiBK,GAAiB,KACpCJ,EAAcI,EAAcF,GAAS,IACrCD,EAAYG,EAAcF,GAAS,IACnCC,EAAWD,EAAU,MAGtB,CAACE,IA6BF,yBAAKE,UAAU,YACb,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,QACxB,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,QAAQL,UAAU,QAArC,qBAKF,kBAACM,EAAA,EAAD,CAAWN,UAAU,2BACnB,kBAACO,EAAA,EAAD,KACE,0DACA,8KAKA,kBAACC,EAAA,EAAD,CACEH,KAAK,2DACLF,QAAQ,OACRM,KAAK,MAHP,iBAQA,6BACA,6BAEA,6EAAkD,uBAAGJ,KAAK,4CAAR,iCAItD,4BAAQL,UAAU,kEAAlB,oCC3IcU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3211c564.chunk.js","sourcesContent":["import React from 'react';\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport './Grid.css'\n// import Arrow from '@elsdoerfer/react-arrow';\n\nfunction Grid(props) {\n    let letters = props.letters\n    let grid = [[\"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\"],[\"\", \"\", \"\", \"\"],[\"\", \"\", \"\", \"\"]]\n    let size\n    setGrid(letters);\n\n    function setGrid(letters) {\n        console.log(\"set grid called \" + letters)\n        if(letters == null) {\n            grid = [[\"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\"],[\"\", \"\", \"\", \"\"],[\"\", \"\", \"\", \"\"]]\n            size = 4\n            return;\n        }\n        size = Math.round(Math.sqrt(letters.length))\n        for(let i = 0; i < size; i++) {\n            for(let j = 0; j < size; j++) {\n                grid[i][j] = letters.charAt(i*size+j)\n            } \n        }\n        console.log(\"set grid to values\")\n    }\n\n\n    return (\n        <div>\n            {grid.map((row, indexR) => (\n                <Row key={indexR}>\n                    {row.map((value, indexC) => (\n                        <Col className='p-1' key={indexR * size +indexC}>\n                            <div className='square' >\n                                <h1 className='text-center letter'>{value}</h1>\n                            </div>\n                            \n                        </Col>\n                    ))}\n                </Row>\n            ))}\n        </div>\n    )\n}\n\nexport default Grid;\n","import React from 'react';\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\n\nfunction AllWords(props) {\n    let words = props.words\n\n    if(Array.isArray(words) && words.length == 0)\n        return(\n            <div></div>\n        )\n    else {\n        return(\n            <div className=\"border border-dark rounded\">\n                <h3>All Words</h3>\n                <Row>\n                    {words.map((row, indexR) => (\n                        <Col key={row} xs=\"6\" sm=\"4\" md=\"3\" lg=\"2\">\n                            {row[0]}\n                        </Col>\n                    ))}\n                </Row>\n            </div>\n        )\n    }\n\n}\n\nexport default AllWords;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Grid from \"./Components/Grid\";\nimport GridForm from \"./Components/GridForm\";\nimport ArrowGrid from \"./Components/ArrowGrid\";\nimport AllWords from \"./Components/AllWords\";\nimport axios from \"axios\";\n\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Container from \"react-bootstrap/Container\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nconst Compress = require(\"compress.js\");\nconst compress = new Compress();\n\nasync function resizeImageFn(file) {\n  const resizedImage = await compress.compress([file], {\n    size: 1, // the max size in MB, defaults to 2MB\n    quality: 1, // the quality of the image, max is 1,\n    maxWidth: 500, // the max width of the output image, defaults to 1920px\n    resize: true, // defaults to true, set false if you do not want to resize the image width and height\n  });\n  const img = resizedImage[0];\n  const base64str = img.data;\n  const imgExt = img.ext;\n  const resizedFiile = Compress.convertBase64ToFile(base64str, imgExt);\n  return resizedFiile;\n}\n\nfunction App() {\n  const [file, setFile] = useState(null);\n  const [letters, setLetters] = useState(\"\");\n  const [directions, setDirections] = useState([]);\n  const [currWord, setCurrWord] = useState(null);\n  const [currIdx, setCurrIdx] = useState(0);\n  const [size, setSize] = useState(4);\n  const [allDirections, setAllDirections] = useState([]);\n  const [imgPreview, setImgPreview] = useState(null);\n\n  const url = \"https://stevenyaooo.pythonanywhere.com\";\n  // const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n  // const url = \"http://127.0.0.1:5000\";\n  // const url = \"http://8408b4828030.ngrok.io\";\n\n  const handleSolveFile = (e) => {\n    e.preventDefault();\n    if (file) {\n      const formData = new FormData();\n      formData.append(\"file\", file);\n      axios.post(`${url}/solveimg`, formData).then(\n        (response) => {\n          setLetters(response.data.letters);\n          setAllDirections(response.data.answer);\n        },\n        (error) => {\n          console.log(error);\n        }\n      );\n      setCurrIdx(0);\n    }\n  };\n\n  // handles the solve with the grid\n  function handleSolveLetters(letters) {\n    if (letters != \"\") {\n      setLetters(letters);\n      axios\n        .post(`${url}/solve`, {\n          letters: letters,\n          size: size,\n        })\n        .then(\n          (response) => {\n            setAllDirections(response.data.answer);\n          },\n          (error) => {\n            console.log(error);\n          }\n        );\n      setCurrIdx(0);\n    }\n  }\n\n  useEffect(() => {\n    if (letters != \"\" && allDirections != []) {\n      setDirections(allDirections[currIdx][1]);\n      setCurrWord(allDirections[currIdx][0]);\n      setCurrIdx(currIdx + 1);\n      // document.getElementsByName(\"next\")[0].style.display = 'block';\n    }\n  }, [allDirections]);\n\n  const handleClick = (data) => {\n    // setLetters(data);\n    handleSolveLetters(data);\n  };\n  const handleNext = () => {\n    if (letters != \"\") {\n      setDirections(allDirections[currIdx][1]);\n      setCurrWord(allDirections[currIdx][0]);\n      setCurrIdx(currIdx + 1);\n    }\n  };\n  const handleFileChange = async (e) => {\n    if (e.target.files[0]) {\n      let reader = new FileReader();\n      let file = await resizeImageFn(e.target.files[0]);\n      console.log(file);\n\n      reader.onload = function (e) {\n        setImgPreview(e.target.result);\n      };\n\n      reader.readAsDataURL(file);\n\n      setFile(file);\n    }\n  };\n  return (\n    <div className=\"bg-light\">\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand href=\"#home\" className=\"pl-3\">\n          Word Hunt Solver\n        </Navbar.Brand>\n      </Navbar>\n\n      <Container className=\"p-3 bg-white min-vh-100\">\n        <Jumbotron>\n          <h1>Never Lose WordHunt Again!</h1>\n          <p>\n            Simply enter the 16 letters of your word hunt board and watch as the\n            solutions magically appear. Check out my YouTube for more quality\n            content:\n          </p>\n          <Button\n            href=\"https://www.youtube.com/channel/UCZDp6CvSxKBEKycW4dpHIJQ\"\n            variant=\"dark\"\n            size=\"lg\"\n          >\n            Go to YouTube\n          </Button>\n\n          <br />\n          <br />\n\n          <h3>This content has been moved to a new website! <a href=\"https://gamepigeonsolvers.com/#/wordhunt\">Click here to check it out</a></h3>\n        </Jumbotron>\n\n        </Container>\n      <footer className=\"bg-dark text-light text-center text-xs p-3 fixed-bottom w-full\">\n        &copy; Copyright Steven Yao 2020\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}